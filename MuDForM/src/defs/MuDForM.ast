language MuDForM

model MuDForM_Model {
    name: identifier;
    units: TypeDefinitions[];
}

modelunit TypeDefinitions {
    name: identifier;
    valuetypes: ValueTypeDef[];
    entitytypes: EntityTypeDef[];
    transitiontypes: TransitionTypeDef[];
    requesttypes: RequestTypeDef[];
}

concept Description {
    text: string;
}

concept ValueTypeDef {
    name: identifier;
    doc?: Description;
    valuetype: ValueType;
}

abstract concept ValueType {}

abstract concept SimpleValueType base ValueType {}

concept StringType base SimpleValueType {
    constraint?: RegexConstraint;
}

concept RegexConstraint {
    regex: string;
}

concept KeywordType base SimpleValueType {
    constraint?: KeywordConstraint; 
}

concept KeywordConstraint {
    values: string; // FIXME this is a stop-gap
}

concept DecimalType base SimpleValueType {
}

concept CompositeValueType base ValueType {
    fields: TypeField[];
}

concept TypeField {
    label: string;
    doc?: Description;
    valuetype: ValueType;
}

concept ValueTypeReference base ValueType {
    reference valuetype: ValueTypeDef;
}

concept EntityTypeDef {
    name: identifier;
    doc?: Description;
    relations: Relation[];
    properties: Property[];
}

concept Relation {
    label: string;
    doc?: Description;
    reference entitytype: EntityTypeDef;
    optional: boolean;
    many: boolean;
}

concept Property {
    label: string;
    doc?: Description;
    reference valuetype: ValueTypeDef;
    identity: boolean;
    optional: boolean;
    many: boolean;
    constraint?: string; // FIXME. string is a stop-gap.
}

concept TransitionTypeDef {
    name: identifier;
    doc?: Description;
    involvings: Involving[];
    parameters: Parameter[];
}

concept RequestTypeDef {
    name: identifier;
    doc?: Description;
    involvings: Involving[];
    parameters: Parameter[];
}

concept Involving {
    label: string;
    doc?: Description;
    reference entitytype: EntityTypeDef;
    instantiates: boolean;
    optional: boolean;
    many: boolean;
}

concept Parameter {
    label: string;
    doc?: Description;
    reference valuetype: ValueTypeDef;
    optional: boolean;
    many: boolean;
    constraint?: string; // FIXME. string is a stop-gap.
}
