// Generated by the Freon Language Generator.
import {
    FreEditor,
    FreEnvironment,
    FreReader,
    FreCompositeTyper,
    FreValidator,
    FreStdlib,
    FreWriter,
    FreInterpreter,
    FreScoperComposite,
    FreLanguageEnvironment,
    FreProjectionHandler,
} from "@freon4dsl/core";
import { MuDForM_ModelActions, initializeEditorDef, initializeProjections } from "../../editor/gen/index.js";
import { initializeScoperDef } from "../../scoper/gen/index.js";
import { initializeTypers } from "../../typer/gen/index.js";
import { MuDForM_ModelValidator } from "../../validator/gen/index.js";
import { MuDForM_ModelStdlib } from "../../stdlib/gen/MuDForM_ModelStdlib.js";
import { MuDForM_ModelModelUnitWriter } from "../../writer/gen/MuDForM_ModelModelUnitWriter.js";
import { MuDForM_ModelModelUnitReader } from "../../reader/gen/MuDForM_ModelModelUnitReader.js";
import { MainMuDForM_ModelInterpreter } from "../../interpreter/MainMuDForM_ModelInterpreter.js";
import { MuDForM_Model, ConceptDefinitions, initializeLanguage } from "../../language/gen/index.js";

/**
 * Class MuDForM_ModelEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for,
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class MuDForM_ModelEnvironment implements FreEnvironment {
    private static environment: FreEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): FreEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new MuDForM_ModelEnvironment();
            FreLanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new MuDForM_ModelActions();
        const myComposite = new FreProjectionHandler();
        this.editor = new FreEditor(myComposite, this, actions);
        initializeLanguage();
        initializeProjections(myComposite);
        initializeEditorDef();
        initializeScoperDef(this.scoper);
        initializeTypers(this.typer);
        this.projectionHandler = myComposite;
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): MuDForM_Model {
        const model = new MuDForM_Model();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: FreEditor;
    scoper: FreScoperComposite = new FreScoperComposite("main");
    typer: FreCompositeTyper = new FreCompositeTyper("main");
    validator: FreValidator = new MuDForM_ModelValidator();
    writer: FreWriter = new MuDForM_ModelModelUnitWriter();
    reader: FreReader = new MuDForM_ModelModelUnitReader();
    interpreter: FreInterpreter = new MainMuDForM_ModelInterpreter();
    projectionHandler: FreProjectionHandler;
    languageName: string = "MuDForM_Model";
    fileExtensions: Map<string, string> = new Map([["ConceptDefinitions", "con"]]);
}
