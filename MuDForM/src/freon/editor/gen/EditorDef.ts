// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import {
    ValueTypeDef,
    SimpleValueType,
    ProductValueType,
    SumValueType,
    TypeField,
    ListValueType,
    ValueTypeReference,
    EntityTypeDef,
    TransitionTypeDef,
    ValueAttribute,
    ReferenceAttribute,
} from "../../language/gen/index.js";
import {
    ValueTypeDefBoxProvider,
    SimpleValueTypeBoxProvider,
    ProductValueTypeBoxProvider,
    SumValueTypeBoxProvider,
    TypeFieldBoxProvider,
    ListValueTypeBoxProvider,
    ValueTypeReferenceBoxProvider,
    EntityTypeDefBoxProvider,
    TransitionTypeDefBoxProvider,
    ValueAttributeBoxProvider,
    ReferenceAttributeBoxProvider,
    ConceptTypeDefinitionsBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "ValueTypeDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["type", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "SimpleValueType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["primitive_type", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ProductValueType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["fields", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "SumValueType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["fields", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "TypeField",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["label", ""], // special projection
                    ["type", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ListValueType",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["list", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ValueTypeReference",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["defRef", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "EntityTypeDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["properties", ""], // special projection
                    ["relations", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "TransitionTypeDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["parameters", ""], // special projection
                    ["involvements", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ValueAttribute",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["label", ""], // special projection
                    ["valueRef", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ReferenceAttribute",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["label", ""], // special projection
                    ["entityRef", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ConceptTypeDefinitions",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["values", ""], // special projection
                    ["entities", ""], // special projection
                    ["transitions", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "ValueTypeDef",
                () => {
                    return new ValueTypeDefBoxProvider(handler);
                },
            ],
            [
                "SimpleValueType",
                () => {
                    return new SimpleValueTypeBoxProvider(handler);
                },
            ],
            [
                "ProductValueType",
                () => {
                    return new ProductValueTypeBoxProvider(handler);
                },
            ],
            [
                "SumValueType",
                () => {
                    return new SumValueTypeBoxProvider(handler);
                },
            ],
            [
                "TypeField",
                () => {
                    return new TypeFieldBoxProvider(handler);
                },
            ],
            [
                "ListValueType",
                () => {
                    return new ListValueTypeBoxProvider(handler);
                },
            ],
            [
                "ValueTypeReference",
                () => {
                    return new ValueTypeReferenceBoxProvider(handler);
                },
            ],
            [
                "EntityTypeDef",
                () => {
                    return new EntityTypeDefBoxProvider(handler);
                },
            ],
            [
                "TransitionTypeDef",
                () => {
                    return new TransitionTypeDefBoxProvider(handler);
                },
            ],
            [
                "ValueAttribute",
                () => {
                    return new ValueAttributeBoxProvider(handler);
                },
            ],
            [
                "ReferenceAttribute",
                () => {
                    return new ReferenceAttributeBoxProvider(handler);
                },
            ],
            [
                "ConceptTypeDefinitions",
                () => {
                    return new ConceptTypeDefinitionsBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("ValueTypeDef").trigger = "ValueTypeDef";
    FreLanguage.getInstance().concept("SimpleValueType").trigger = "SimpleValueType";
    FreLanguage.getInstance().concept("ProductValueType").trigger = "ProductValueType";
    FreLanguage.getInstance().concept("SumValueType").trigger = "SumValueType";
    FreLanguage.getInstance().concept("TypeField").trigger = "TypeField";
    FreLanguage.getInstance().concept("ListValueType").trigger = "ListValueType";
    FreLanguage.getInstance().concept("ValueTypeReference").trigger = "ValueTypeReference";
    FreLanguage.getInstance().concept("EntityTypeDef").trigger = "EntityTypeDef";
    FreLanguage.getInstance().concept("TransitionTypeDef").trigger = "TransitionTypeDef";
    FreLanguage.getInstance().concept("ValueAttribute").trigger = "ValueAttribute";
    FreLanguage.getInstance().concept("ReferenceAttribute").trigger = "ReferenceAttribute";

    const conceptProjectionToPropertyProjection = new Map();
}
