// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration.js";
import { SimpleValueDef, EntityDef, TransitionDef, ValueAttribute, ReferenceAttribute } from "../../language/gen/index.js";
import {
    SimpleValueDefBoxProvider,
    EntityDefBoxProvider,
    TransitionDefBoxProvider,
    ValueAttributeBoxProvider,
    ReferenceAttributeBoxProvider,
    ConceptDefinitionsBoxProvider,
} from "../../editor/gen/index.js";

const map = new Map([
    // the main map
    [
        // Concept has special projection for (one of) its parts
        "SimpleValueDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["db_type", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "EntityDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["properties", ""], // special projection
                    ["relations", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "TransitionDef",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["doc", ""], // special projection
                    ["parameters", ""], // special projection
                    ["involvements", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ValueAttribute",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["valueRef", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ReferenceAttribute",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["entityRef", ""], // special projection
                ]),
            ],
        ]),
    ],
    [
        // Concept has special projection for (one of) its parts
        "ConceptDefinitions",
        new Map([
            // Projection has special projection for (one of) the parts
            [
                // Projection has special projection for some part
                "default",
                new Map([
                    ["name", ""], // special projection
                    ["simple_values", ""], // special projection
                    ["entities", ""], // special projection
                    ["transitions", ""], // special projection
                ]),
            ],
        ]),
    ],
]);

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "SimpleValueDef",
                () => {
                    return new SimpleValueDefBoxProvider(handler);
                },
            ],
            [
                "EntityDef",
                () => {
                    return new EntityDefBoxProvider(handler);
                },
            ],
            [
                "TransitionDef",
                () => {
                    return new TransitionDefBoxProvider(handler);
                },
            ],
            [
                "ValueAttribute",
                () => {
                    return new ValueAttributeBoxProvider(handler);
                },
            ],
            [
                "ReferenceAttribute",
                () => {
                    return new ReferenceAttributeBoxProvider(handler);
                },
            ],
            [
                "ConceptDefinitions",
                () => {
                    return new ConceptDefinitionsBoxProvider(handler);
                },
            ],
        ]),
    );
    handler.initTableHeaders([]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("SimpleValueDef").trigger = "SimpleValueDef";
    FreLanguage.getInstance().concept("EntityDef").trigger = "EntityDef";
    FreLanguage.getInstance().concept("TransitionDef").trigger = "TransitionDef";
    FreLanguage.getInstance().concept("ValueAttribute").trigger = "ValueAttribute";
    FreLanguage.getInstance().concept("ReferenceAttribute").trigger = "ReferenceAttribute";

    const conceptProjectionToPropertyProjection = new Map();
}
