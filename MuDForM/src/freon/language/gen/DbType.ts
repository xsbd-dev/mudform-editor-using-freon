// Generated by the Freon Language Generator.
import { MobxModelElementImpl, observableprim, FreNamedNode, FreParseLocation, FreUtils } from "@freon4dsl/core";

import { runInAction, makeObservable, action } from "mobx";
/**
 * Class DbType is the implementation of the limited concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export class DbType extends MobxModelElementImpl implements FreNamedNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<DbType>): DbType {
        const result = new DbType(data.$id);
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    static bigdec: DbType; // implementation of instance bigdec
    static bigint: DbType; // implementation of instance bigint
    static boolean: DbType; // implementation of instance boolean
    static bytes: DbType; // implementation of instance bytes
    static double: DbType; // implementation of instance double
    static float: DbType; // implementation of instance float
    static instant: DbType; // implementation of instance instant
    static keyword: DbType; // implementation of instance keyword
    static long: DbType; // implementation of instance long
    static string: DbType; // implementation of instance string
    static symbol: DbType; // implementation of instance symbol
    static uuid: DbType; // implementation of instance uuid
    static uri: DbType; // implementation of instance uri
    static $freANY: DbType; // default predefined instance

    readonly $typename: string = "DbType"; // holds the metatype in the form of a string
    $id: string = ""; // a unique identifier
    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed
    name: string; // implementation of name

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = FreUtils.ID(); // uuid.v4();
        }
        // Both 'observableprim' and 'observableprimlist' change the get and set of the attribute
        // such that the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observableprim(this, "name");
        this.name = "";

        // Make copy method a mobx action
        makeObservable(this, {
            copy: action,
        });
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    freId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): DbType {
        const result = new DbType();
        if (!!this.name) {
            result.name = this.name;
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<DbType>): boolean {
        let result: boolean = true;
        if (result && toBeMatched.name !== null && toBeMatched.name !== undefined && toBeMatched.name.length > 0) {
            result = result && this.name === toBeMatched.name;
        }
        return result;
    }
}

// Because of mobx we need to generate the initialisations outside of the class,
// otherwise the state of properties with primitive type will not be kept correctly.
runInAction(() => {
    DbType.bigdec = DbType.create({
        name: "bigdec",
    });
    DbType.bigint = DbType.create({
        name: "bigint",
    });
    DbType.boolean = DbType.create({
        name: "boolean",
    });
    DbType.bytes = DbType.create({
        name: "bytes",
    });
    DbType.double = DbType.create({
        name: "double",
    });
    DbType.float = DbType.create({
        name: "float",
    });
    DbType.instant = DbType.create({
        name: "instant",
    });
    DbType.keyword = DbType.create({
        name: "keyword",
    });
    DbType.long = DbType.create({
        name: "long",
    });
    DbType.string = DbType.create({
        name: "string",
    });
    DbType.symbol = DbType.create({
        name: "symbol",
    });
    DbType.uuid = DbType.create({
        name: "uuid",
    });
    DbType.uri = DbType.create({
        name: "uri",
    });
});
