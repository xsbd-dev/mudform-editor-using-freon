// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { MuDForM_ModelStdlib } from "../../stdlib/gen/MuDForM_ModelStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "MuDForM_Model";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeMuDForM_Model());
    FreLanguage.getInstance().addUnit(describeConceptTypeDefinitions());
    FreLanguage.getInstance().addConcept(describeValueTypeDef());
    FreLanguage.getInstance().addConcept(describeValueType());
    FreLanguage.getInstance().addConcept(describeSimpleValueType());
    FreLanguage.getInstance().addConcept(describeDatomicType());
    FreLanguage.getInstance().addConcept(describeProductValueType());
    FreLanguage.getInstance().addConcept(describeSumValueType());
    FreLanguage.getInstance().addConcept(describeTypeField());
    FreLanguage.getInstance().addConcept(describeListValueType());
    FreLanguage.getInstance().addConcept(describeValueTypeReference());
    FreLanguage.getInstance().addConcept(describeEntityTypeDef());
    FreLanguage.getInstance().addConcept(describeTransitionTypeDef());
    FreLanguage.getInstance().addConcept(describeValueAttribute());
    FreLanguage.getInstance().addConcept(describeReferenceAttribute());

    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = MuDForM_ModelStdlib.getInstance();
}

function describeMuDForM_Model(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "MuDForM_Model",
        id: "-id-MuDForM_Model",
        key: "-key-MuDForM_Model",
        isNamespace: true,
        language: "-key-MuDForM",
        constructor: (id?: string) => {
            return new MyLanguage.MuDForM_Model(id);
        },
        creator: (data: Partial<MyLanguage.MuDForM_Model>) => {
            return MyLanguage.MuDForM_Model.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-id-MuDForM_Model-name",
        key: "-key-MuDForM_Model-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    model.properties.set("units", {
        name: "units",
        id: "-id-MuDForM_Model-units",
        key: "-key-MuDForM_Model-units",
        type: "ConceptTypeDefinitions",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return model;
}

function describeConceptTypeDefinitions(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "ConceptTypeDefinitions",
        id: "-id-ConceptTypeDefinitions",
        key: "-key-ConceptTypeDefinitions",
        isNamedElement: true,
        language: "-key-MuDForM",
        fileExtension: "con",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.ConceptTypeDefinitions(id);
        },
        creator: (data: Partial<MyLanguage.ConceptTypeDefinitions>) => {
            return MyLanguage.ConceptTypeDefinitions.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "ConceptTypeDefinitions",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-ConceptTypeDefinitions-name",
        key: "-key-ConceptTypeDefinitions-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    modelunit.properties.set("doc", {
        name: "doc",
        id: "-id-ConceptTypeDefinitions-doc",
        key: "-key-ConceptTypeDefinitions-doc",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    modelunit.properties.set("values", {
        name: "values",
        id: "-id-ConceptTypeDefinitions-values",
        key: "-key-ConceptTypeDefinitions-values",
        type: "ValueTypeDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    modelunit.properties.set("entities", {
        name: "entities",
        id: "-id-ConceptTypeDefinitions-entities",
        key: "-key-ConceptTypeDefinitions-entities",
        type: "EntityTypeDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    modelunit.properties.set("transitions", {
        name: "transitions",
        id: "-id-ConceptTypeDefinitions-transitions",
        key: "-key-ConceptTypeDefinitions-transitions",
        type: "TransitionTypeDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return modelunit;
}

function describeValueTypeDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueTypeDef",
        id: "-id-ValueTypeDef",
        key: "-key-ValueTypeDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "ValueTypeDef",
        constructor: (id?: string) => {
            return new MyLanguage.ValueTypeDef(id);
        },
        creator: (data: Partial<MyLanguage.ValueTypeDef>) => {
            return MyLanguage.ValueTypeDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-ValueTypeDef-name",
        key: "-key-ValueTypeDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-ValueTypeDef-doc",
        key: "-key-ValueTypeDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("type", {
        name: "type",
        id: "-id-ValueTypeDef-type",
        key: "-key-ValueTypeDef-type",
        type: "ValueType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeValueType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueType",
        id: "-id-ValueType",
        key: "-key-ValueType",
        isAbstract: true,
        isPublic: false,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ValueType",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.ValueType>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["SimpleValueType", "ProductValueType", "SumValueType", "ListValueType", "ValueTypeReference"],
    };

    return concept;
}

function describeSimpleValueType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "SimpleValueType",
        id: "-id-SimpleValueType",
        key: "-key-SimpleValueType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "SimpleValueType",
        constructor: (id?: string) => {
            return new MyLanguage.SimpleValueType(id);
        },
        creator: (data: Partial<MyLanguage.SimpleValueType>) => {
            return MyLanguage.SimpleValueType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueType",
        subConceptNames: [],
    };

    concept.properties.set("primitive_type", {
        name: "primitive_type",
        id: "-id-SimpleValueType-primitive_type",
        key: "-key-SimpleValueType-primitive_type",
        type: "DatomicType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeDatomicType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DatomicType",
        id: "-id-DatomicType",
        key: "-key-DatomicType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: [
            "bigdec",
            "bigint",
            "boolean",
            "bytes",
            "double",
            "float",
            "instant",
            "keyword",
            "long",
            "string",
            "symbol",
            "uuid",
            "uri",
        ],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "DatomicType",
        constructor: (id?: string) => {
            return new MyLanguage.DatomicType(id);
        },
        creator: (data: Partial<MyLanguage.DatomicType>) => {
            return MyLanguage.DatomicType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-DatomicType-name",
        key: "-key-DatomicType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    return concept;
}

function describeProductValueType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ProductValueType",
        id: "-id-ProductValueType",
        key: "-key-ProductValueType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ProductValueType",
        constructor: (id?: string) => {
            return new MyLanguage.ProductValueType(id);
        },
        creator: (data: Partial<MyLanguage.ProductValueType>) => {
            return MyLanguage.ProductValueType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueType",
        subConceptNames: [],
    };

    concept.properties.set("fields", {
        name: "fields",
        id: "-id-ProductValueType-fields",
        key: "-key-ProductValueType-fields",
        type: "TypeField",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeSumValueType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "SumValueType",
        id: "-id-SumValueType",
        key: "-key-SumValueType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "SumValueType",
        constructor: (id?: string) => {
            return new MyLanguage.SumValueType(id);
        },
        creator: (data: Partial<MyLanguage.SumValueType>) => {
            return MyLanguage.SumValueType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueType",
        subConceptNames: [],
    };

    concept.properties.set("fields", {
        name: "fields",
        id: "-id-SumValueType-fields",
        key: "-key-SumValueType-fields",
        type: "TypeField",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeTypeField(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TypeField",
        id: "-id-TypeField",
        key: "-key-TypeField",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "TypeField",
        constructor: (id?: string) => {
            return new MyLanguage.TypeField(id);
        },
        creator: (data: Partial<MyLanguage.TypeField>) => {
            return MyLanguage.TypeField.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("label", {
        name: "label",
        id: "-id-TypeField-label",
        key: "-key-TypeField-label",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("type", {
        name: "type",
        id: "-id-TypeField-type",
        key: "-key-TypeField-type",
        type: "ValueType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeListValueType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ListValueType",
        id: "-id-ListValueType",
        key: "-key-ListValueType",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ListValueType",
        constructor: (id?: string) => {
            return new MyLanguage.ListValueType(id);
        },
        creator: (data: Partial<MyLanguage.ListValueType>) => {
            return MyLanguage.ListValueType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueType",
        subConceptNames: [],
    };

    concept.properties.set("list", {
        name: "list",
        id: "-id-ListValueType-list",
        key: "-key-ListValueType-list",
        type: "ValueType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeValueTypeReference(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueTypeReference",
        id: "-id-ValueTypeReference",
        key: "-key-ValueTypeReference",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ValueTypeReference",
        constructor: (id?: string) => {
            return new MyLanguage.ValueTypeReference(id);
        },
        creator: (data: Partial<MyLanguage.ValueTypeReference>) => {
            return MyLanguage.ValueTypeReference.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueType",
        subConceptNames: [],
    };

    concept.properties.set("defRef", {
        name: "defRef",
        id: "-id-ValueTypeReference-defRef",
        key: "-key-ValueTypeReference-defRef",
        type: "ValueTypeDef",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeEntityTypeDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EntityTypeDef",
        id: "-id-EntityTypeDef",
        key: "-key-EntityTypeDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "EntityTypeDef",
        constructor: (id?: string) => {
            return new MyLanguage.EntityTypeDef(id);
        },
        creator: (data: Partial<MyLanguage.EntityTypeDef>) => {
            return MyLanguage.EntityTypeDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-EntityTypeDef-name",
        key: "-key-EntityTypeDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-EntityTypeDef-doc",
        key: "-key-EntityTypeDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("properties", {
        name: "properties",
        id: "-id-EntityTypeDef-properties",
        key: "-key-EntityTypeDef-properties",
        type: "ValueAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    concept.properties.set("relations", {
        name: "relations",
        id: "-id-EntityTypeDef-relations",
        key: "-key-EntityTypeDef-relations",
        type: "ReferenceAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeTransitionTypeDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TransitionTypeDef",
        id: "-id-TransitionTypeDef",
        key: "-key-TransitionTypeDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "TransitionTypeDef",
        constructor: (id?: string) => {
            return new MyLanguage.TransitionTypeDef(id);
        },
        creator: (data: Partial<MyLanguage.TransitionTypeDef>) => {
            return MyLanguage.TransitionTypeDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-TransitionTypeDef-name",
        key: "-key-TransitionTypeDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-TransitionTypeDef-doc",
        key: "-key-TransitionTypeDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("parameters", {
        name: "parameters",
        id: "-id-TransitionTypeDef-parameters",
        key: "-key-TransitionTypeDef-parameters",
        type: "ValueAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    concept.properties.set("involvements", {
        name: "involvements",
        id: "-id-TransitionTypeDef-involvements",
        key: "-key-TransitionTypeDef-involvements",
        type: "ReferenceAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeValueAttribute(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueAttribute",
        id: "-id-ValueAttribute",
        key: "-key-ValueAttribute",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ValueAttribute",
        constructor: (id?: string) => {
            return new MyLanguage.ValueAttribute(id);
        },
        creator: (data: Partial<MyLanguage.ValueAttribute>) => {
            return MyLanguage.ValueAttribute.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("label", {
        name: "label",
        id: "-id-ValueAttribute-label",
        key: "-key-ValueAttribute-label",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    concept.properties.set("valueRef", {
        name: "valueRef",
        id: "-id-ValueAttribute-valueRef",
        key: "-key-ValueAttribute-valueRef",
        type: "ValueTypeDef",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeReferenceAttribute(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ReferenceAttribute",
        id: "-id-ReferenceAttribute",
        key: "-key-ReferenceAttribute",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: false,
        trigger: "ReferenceAttribute",
        constructor: (id?: string) => {
            return new MyLanguage.ReferenceAttribute(id);
        },
        creator: (data: Partial<MyLanguage.ReferenceAttribute>) => {
            return MyLanguage.ReferenceAttribute.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("label", {
        name: "label",
        id: "-id-ReferenceAttribute-label",
        key: "-key-ReferenceAttribute-label",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    concept.properties.set("entityRef", {
        name: "entityRef",
        id: "-id-ReferenceAttribute-entityRef",
        key: "-key-ReferenceAttribute-entityRef",
        type: "EntityTypeDef",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}
