// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { MuDForM_ModelStdlib } from "../../stdlib/gen/MuDForM_ModelStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "MuDForM_Model";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeMuDForM_Model());
    FreLanguage.getInstance().addUnit(describeConceptDefinitions());
    FreLanguage.getInstance().addConcept(describeValueDef());
    FreLanguage.getInstance().addConcept(describeSimpleValueDef());
    FreLanguage.getInstance().addConcept(describeEntityDef());
    FreLanguage.getInstance().addConcept(describeTransitionDef());
    FreLanguage.getInstance().addConcept(describeValueAttribute());
    FreLanguage.getInstance().addConcept(describeReferenceAttribute());
    FreLanguage.getInstance().addConcept(describeDbType());

    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = MuDForM_ModelStdlib.getInstance();
}

function describeMuDForM_Model(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "MuDForM_Model",
        id: "-id-MuDForM_Model",
        key: "-key-MuDForM_Model",
        isNamespace: true,
        language: "-key-MuDForM",
        constructor: (id?: string) => {
            return new MyLanguage.MuDForM_Model(id);
        },
        creator: (data: Partial<MyLanguage.MuDForM_Model>) => {
            return MyLanguage.MuDForM_Model.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-id-MuDForM_Model-name",
        key: "-key-MuDForM_Model-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    model.properties.set("units", {
        name: "units",
        id: "-id-MuDForM_Model-units",
        key: "-key-MuDForM_Model-units",
        type: "ConceptDefinitions",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return model;
}

function describeConceptDefinitions(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "ConceptDefinitions",
        id: "-id-ConceptDefinitions",
        key: "-key-ConceptDefinitions",
        isNamedElement: true,
        language: "-key-MuDForM",
        fileExtension: "con",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.ConceptDefinitions(id);
        },
        creator: (data: Partial<MyLanguage.ConceptDefinitions>) => {
            return MyLanguage.ConceptDefinitions.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "ConceptDefinitions",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-ConceptDefinitions-name",
        key: "-key-ConceptDefinitions-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    modelunit.properties.set("simple_values", {
        name: "simple_values",
        id: "-id-ConceptDefinitions-simple_values",
        key: "-key-ConceptDefinitions-simple_values",
        type: "SimpleValueDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    modelunit.properties.set("entities", {
        name: "entities",
        id: "-id-ConceptDefinitions-entities",
        key: "-key-ConceptDefinitions-entities",
        type: "EntityDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    modelunit.properties.set("transitions", {
        name: "transitions",
        id: "-id-ConceptDefinitions-transitions",
        key: "-key-ConceptDefinitions-transitions",
        type: "TransitionDef",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return modelunit;
}

function describeValueDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueDef",
        id: "-id-ValueDef",
        key: "-key-ValueDef",
        isAbstract: true,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "ValueDef",
        constructor: (id?: string) => {
            return null;
        },
        creator: (data: Partial<MyLanguage.ValueDef>) => {
            return null;
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["SimpleValueDef"],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-ValueDef-name",
        key: "-key-ValueDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    return concept;
}

function describeSimpleValueDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "SimpleValueDef",
        id: "-id-SimpleValueDef",
        key: "-key-SimpleValueDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "SimpleValueDef",
        constructor: (id?: string) => {
            return new MyLanguage.SimpleValueDef(id);
        },
        creator: (data: Partial<MyLanguage.SimpleValueDef>) => {
            return MyLanguage.SimpleValueDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "ValueDef",
        subConceptNames: [],
    };
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-SimpleValueDef-doc",
        key: "-key-SimpleValueDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("name", {
        name: "name",
        id: "-id-ValueDef-name",
        key: "-key-ValueDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    concept.properties.set("db_type", {
        name: "db_type",
        id: "-id-SimpleValueDef-db_type",
        key: "-key-SimpleValueDef-db_type",
        type: "DbType",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeEntityDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "EntityDef",
        id: "-id-EntityDef",
        key: "-key-EntityDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "EntityDef",
        constructor: (id?: string) => {
            return new MyLanguage.EntityDef(id);
        },
        creator: (data: Partial<MyLanguage.EntityDef>) => {
            return MyLanguage.EntityDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-EntityDef-name",
        key: "-key-EntityDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-EntityDef-doc",
        key: "-key-EntityDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("properties", {
        name: "properties",
        id: "-id-EntityDef-properties",
        key: "-key-EntityDef-properties",
        type: "ValueAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    concept.properties.set("relations", {
        name: "relations",
        id: "-id-EntityDef-relations",
        key: "-key-EntityDef-relations",
        type: "ReferenceAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeTransitionDef(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "TransitionDef",
        id: "-id-TransitionDef",
        key: "-key-TransitionDef",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "TransitionDef",
        constructor: (id?: string) => {
            return new MyLanguage.TransitionDef(id);
        },
        creator: (data: Partial<MyLanguage.TransitionDef>) => {
            return MyLanguage.TransitionDef.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-TransitionDef-name",
        key: "-key-TransitionDef-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("doc", {
        name: "doc",
        id: "-id-TransitionDef-doc",
        key: "-key-TransitionDef-doc",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });
    concept.properties.set("parameters", {
        name: "parameters",
        id: "-id-TransitionDef-parameters",
        key: "-key-TransitionDef-parameters",
        type: "ValueAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });
    concept.properties.set("involvements", {
        name: "involvements",
        id: "-id-TransitionDef-involvements",
        key: "-key-TransitionDef-involvements",
        type: "ReferenceAttribute",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "part",
    });

    return concept;
}

function describeValueAttribute(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ValueAttribute",
        id: "-id-ValueAttribute",
        key: "-key-ValueAttribute",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "ValueAttribute",
        constructor: (id?: string) => {
            return new MyLanguage.ValueAttribute(id);
        },
        creator: (data: Partial<MyLanguage.ValueAttribute>) => {
            return MyLanguage.ValueAttribute.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-ValueAttribute-name",
        key: "-key-ValueAttribute-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    concept.properties.set("valueRef", {
        name: "valueRef",
        id: "-id-ValueAttribute-valueRef",
        key: "-key-ValueAttribute-valueRef",
        type: "ValueDef",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeReferenceAttribute(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "ReferenceAttribute",
        id: "-id-ReferenceAttribute",
        key: "-key-ReferenceAttribute",
        isAbstract: false,
        isPublic: true,
        isLimited: false,
        instanceNames: [],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "ReferenceAttribute",
        constructor: (id?: string) => {
            return new MyLanguage.ReferenceAttribute(id);
        },
        creator: (data: Partial<MyLanguage.ReferenceAttribute>) => {
            return MyLanguage.ReferenceAttribute.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-ReferenceAttribute-name",
        key: "-key-ReferenceAttribute-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    concept.properties.set("entityRef", {
        name: "entityRef",
        id: "-id-ReferenceAttribute-entityRef",
        key: "-key-ReferenceAttribute-entityRef",
        type: "EntityDef",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-MuDForM",
        propertyKind: "reference",
    });
    return concept;
}

function describeDbType(): FreLanguageConcept {
    const concept: FreLanguageConcept = {
        typeName: "DbType",
        id: "-id-DbType",
        key: "-key-DbType",
        isAbstract: false,
        isPublic: true,
        isLimited: true,
        instanceNames: [
            "bigdec",
            "bigint",
            "boolean",
            "bytes",
            "double",
            "float",
            "instant",
            "keyword",
            "long",
            "string",
            "symbol",
            "uuid",
            "uri",
        ],
        language: "-key-MuDForM",
        isNamedElement: true,
        trigger: "DbType",
        constructor: (id?: string) => {
            return new MyLanguage.DbType(id);
        },
        creator: (data: Partial<MyLanguage.DbType>) => {
            return MyLanguage.DbType.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: [],
    };
    concept.properties.set("name", {
        name: "name",
        id: "-id-DbType-name",
        key: "-key-DbType-name",
        type: "string",
        isList: false,
        isOptional: false, // false,
        isPublic: true,
        language: "-key-MuDForM",
        propertyKind: "primitive",
    });

    return concept;
}
