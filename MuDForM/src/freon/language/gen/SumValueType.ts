// Generated by the Freon Language Generator.
import { observablepartlist, FreNode, FreParseLocation, matchElementList } from "@freon4dsl/core";
import { ValueType, TypeField } from "./internal.js";

/**
 * Class SumValueType is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to the changes in the state of its properties.
 */
export class SumValueType extends ValueType implements FreNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<SumValueType>): SumValueType {
        const result = new SumValueType(data.$id);
        if (!!data.fields) {
            data.fields.forEach((x) => result.fields.push(x));
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    readonly $typename: string = "SumValueType"; // holds the metatype in the form of a string

    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed

    fields: TypeField[]; // implementation of part 'fields'

    constructor(id?: string) {
        super(id);

        // Both 'observablepart' and 'observablepartlist' change the get and set of the attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observablepartlist(this, "fields");
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): SumValueType {
        const result = new SumValueType();
        if (!!this.fields) {
            this.fields.forEach((x) => result.fields.push(x.copy()));
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<SumValueType>): boolean {
        let result: boolean = super.match(toBeMatched);
        if (result && !!toBeMatched.fields) {
            result = result && matchElementList(this.fields, toBeMatched.fields);
        }
        return result;
    }
}
