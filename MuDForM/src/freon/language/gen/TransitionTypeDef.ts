// Generated by the Freon Language Generator.
import {
    MobxModelElementImpl,
    observableprim,
    observablepartlist,
    FreNamedNode,
    FreParseLocation,
    FreUtils,
    matchElementList,
} from "@freon4dsl/core";
import { ValueAttribute, ReferenceAttribute } from "./internal.js";

import { makeObservable, action } from "mobx";

/**
 * Class TransitionTypeDef is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to the changes in the state of its properties.
 */
export class TransitionTypeDef extends MobxModelElementImpl implements FreNamedNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<TransitionTypeDef>): TransitionTypeDef {
        const result = new TransitionTypeDef(data.$id);
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.doc) {
            result.doc = data.doc;
        }
        if (!!data.parameters) {
            data.parameters.forEach((x) => result.parameters.push(x));
        }
        if (!!data.involvements) {
            data.involvements.forEach((x) => result.involvements.push(x));
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    readonly $typename: string = "TransitionTypeDef"; // holds the metatype in the form of a string
    $id: string = ""; // a unique identifier
    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed
    name: string; // implementation of name
    doc: string; // implementation of doc
    parameters: ValueAttribute[]; // implementation of part 'parameters'
    involvements: ReferenceAttribute[]; // implementation of part 'involvements'

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = FreUtils.ID(); // uuid.v4();
        }
        // Both 'observableprim' and 'observableprimlist' change the get and set of the attribute
        // such that the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observableprim(this, "name");
        this.name = "";
        observableprim(this, "doc");
        this.doc = "";

        // Both 'observablepart' and 'observablepartlist' change the get and set of the attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observablepartlist(this, "parameters");
        observablepartlist(this, "involvements");

        // Make copy method a mobx action
        makeObservable(this, {
            copy: action,
        });
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    freId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): TransitionTypeDef {
        const result = new TransitionTypeDef();
        if (!!this.name) {
            result.name = this.name;
        }
        if (!!this.doc) {
            result.doc = this.doc;
        }
        if (!!this.parameters) {
            this.parameters.forEach((x) => result.parameters.push(x.copy()));
        }
        if (!!this.involvements) {
            this.involvements.forEach((x) => result.involvements.push(x.copy()));
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<TransitionTypeDef>): boolean {
        let result: boolean = true;
        if (result && toBeMatched.name !== null && toBeMatched.name !== undefined && toBeMatched.name.length > 0) {
            result = result && this.name === toBeMatched.name;
        }
        if (result && toBeMatched.doc !== null && toBeMatched.doc !== undefined && toBeMatched.doc.length > 0) {
            result = result && this.doc === toBeMatched.doc;
        }
        if (result && !!toBeMatched.parameters) {
            result = result && matchElementList(this.parameters, toBeMatched.parameters);
        }
        if (result && !!toBeMatched.involvements) {
            result = result && matchElementList(this.involvements, toBeMatched.involvements);
        }
        return result;
    }
}
