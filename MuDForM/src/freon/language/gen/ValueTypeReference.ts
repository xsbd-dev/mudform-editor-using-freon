// Generated by the Freon Language Generator.
import { observablepart, FreNode, FreParseLocation, FreNodeReference } from "@freon4dsl/core";
import { ValueType, ValueTypeDef } from "./internal.js";

/**
 * Class ValueTypeReference is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to the changes in the state of its properties.
 */
export class ValueTypeReference extends ValueType implements FreNode {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data partial object
     */
    static create(data: Partial<ValueTypeReference>): ValueTypeReference {
        const result = new ValueTypeReference(data.$id);
        if (!!data.defRef) {
            result.defRef = data.defRef;
        }
        if (!!data.parseLocation) {
            result.parseLocation = data.parseLocation;
        }
        return result;
    }

    readonly $typename: string = "ValueTypeReference"; // holds the metatype in the form of a string

    parseLocation: FreParseLocation; // if relevant, the location of this element within the source from which it is parsed

    defRef: FreNodeReference<ValueTypeDef>; // implementation of reference 'defRef'

    constructor(id?: string) {
        super(id);

        // Both 'observablepart' and 'observablepartlist' change the get and set of the attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable. In lists no 'null' or 'undefined' values are allowed.
        observablepart(this, "defRef");
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    freLanguageConcept(): string {
        return this.$typename;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    freIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    freIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    freIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    freIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * A convenience method that copies this instance into a new object.
     */
    copy(): ValueTypeReference {
        const result = new ValueTypeReference();
        if (!!this.defRef) {
            result.defRef = this.defRef.copy();
        }
        return result;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<ValueTypeReference>): boolean {
        let result: boolean = super.match(toBeMatched);
        if (result && !!toBeMatched.defRef) {
            result = result && this.defRef.match(toBeMatched.defRef);
        }
        return result;
    }

    /**
     * Convenience method for reference 'defRef'.
     * Instead of returning a 'FreNodeReference<ValueTypeDef>' object,
     * it returns the referred 'ValueTypeDef' object, if it can be found.
     */
    get $defRef(): ValueTypeDef {
        if (!!this.defRef) {
            return this.defRef.referred;
        }
        return null;
    }
}
