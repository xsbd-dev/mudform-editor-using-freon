// Generated by the Freon Language Generator.
import {
    ConceptTypeDefinitions,
    DatomicType,
    EntityTypeDef,
    ListValueType,
    MuDForM_Model,
    ProductValueType,
    ReferenceAttribute,
    SimpleValueType,
    SumValueType,
    TransitionTypeDef,
    TypeField,
    ValueAttribute,
    ValueType,
    ValueTypeDef,
    ValueTypeReference,
} from "../../language/gen/index.js";
import { MuDForM_ModelWorker } from "./MuDForM_ModelWorker.js";

/**
 * Class MuDForM_ModelDefaultWorker is part of the implementation of the visitor pattern on models.
 * It implements the interface MuDForM_ModelWorker with empty methods, and can thus be used as
 * base to any class that needs to traverse the model tree.
 * Class MuDForM_ModelWalker implements the traversal of the model tree. This class implements
 * the actual visiting of each node in the tree.
 */
export class MuDForM_ModelDefaultWorker implements MuDForM_ModelWorker {
    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeMuDForM_Model(modelelement: MuDForM_Model): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterMuDForM_Model(modelelement: MuDForM_Model): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeConceptTypeDefinitions(modelelement: ConceptTypeDefinitions): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterConceptTypeDefinitions(modelelement: ConceptTypeDefinitions): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeValueTypeDef(modelelement: ValueTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterValueTypeDef(modelelement: ValueTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeValueType(modelelement: ValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterValueType(modelelement: ValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeSimpleValueType(modelelement: SimpleValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterSimpleValueType(modelelement: SimpleValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeDatomicType(modelelement: DatomicType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterDatomicType(modelelement: DatomicType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeProductValueType(modelelement: ProductValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterProductValueType(modelelement: ProductValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeSumValueType(modelelement: SumValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterSumValueType(modelelement: SumValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeTypeField(modelelement: TypeField): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterTypeField(modelelement: TypeField): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeListValueType(modelelement: ListValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterListValueType(modelelement: ListValueType): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeValueTypeReference(modelelement: ValueTypeReference): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterValueTypeReference(modelelement: ValueTypeReference): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeEntityTypeDef(modelelement: EntityTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterEntityTypeDef(modelelement: EntityTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeTransitionTypeDef(modelelement: TransitionTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterTransitionTypeDef(modelelement: TransitionTypeDef): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeValueAttribute(modelelement: ValueAttribute): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterValueAttribute(modelelement: ValueAttribute): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeReferenceAttribute(modelelement: ReferenceAttribute): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterReferenceAttribute(modelelement: ReferenceAttribute): boolean {
        return false;
    }
}
