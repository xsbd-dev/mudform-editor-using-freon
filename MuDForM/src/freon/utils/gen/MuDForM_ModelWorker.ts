// Generated by the Freon Language Generator.
import {
    ConceptTypeDefinitions,
    DatomicType,
    EntityTypeDef,
    ListValueType,
    MuDForM_Model,
    ProductValueType,
    ReferenceAttribute,
    SimpleValueType,
    SumValueType,
    TransitionTypeDef,
    TypeField,
    ValueAttribute,
    ValueType,
    ValueTypeDef,
    ValueTypeReference,
} from "../../language/gen/index.js";

/**
 * Interface MuDForM_ModelWorker implements the extended visitor pattern of instances of language MuDForM_Model.
 * Class MuDForM_ModelWalker implements the traversal of the model tree, classes that implement this interface
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 */
export interface MuDForM_ModelWorker {
    execBeforeMuDForM_Model(modelelement: MuDForM_Model): boolean;
    execAfterMuDForM_Model(modelelement: MuDForM_Model): boolean;

    execBeforeConceptTypeDefinitions(modelelement: ConceptTypeDefinitions): boolean;
    execAfterConceptTypeDefinitions(modelelement: ConceptTypeDefinitions): boolean;

    execBeforeValueTypeDef(modelelement: ValueTypeDef): boolean;
    execAfterValueTypeDef(modelelement: ValueTypeDef): boolean;

    execBeforeValueType(modelelement: ValueType): boolean;
    execAfterValueType(modelelement: ValueType): boolean;

    execBeforeSimpleValueType(modelelement: SimpleValueType): boolean;
    execAfterSimpleValueType(modelelement: SimpleValueType): boolean;

    execBeforeDatomicType(modelelement: DatomicType): boolean;
    execAfterDatomicType(modelelement: DatomicType): boolean;

    execBeforeProductValueType(modelelement: ProductValueType): boolean;
    execAfterProductValueType(modelelement: ProductValueType): boolean;

    execBeforeSumValueType(modelelement: SumValueType): boolean;
    execAfterSumValueType(modelelement: SumValueType): boolean;

    execBeforeTypeField(modelelement: TypeField): boolean;
    execAfterTypeField(modelelement: TypeField): boolean;

    execBeforeListValueType(modelelement: ListValueType): boolean;
    execAfterListValueType(modelelement: ListValueType): boolean;

    execBeforeValueTypeReference(modelelement: ValueTypeReference): boolean;
    execAfterValueTypeReference(modelelement: ValueTypeReference): boolean;

    execBeforeEntityTypeDef(modelelement: EntityTypeDef): boolean;
    execAfterEntityTypeDef(modelelement: EntityTypeDef): boolean;

    execBeforeTransitionTypeDef(modelelement: TransitionTypeDef): boolean;
    execAfterTransitionTypeDef(modelelement: TransitionTypeDef): boolean;

    execBeforeValueAttribute(modelelement: ValueAttribute): boolean;
    execAfterValueAttribute(modelelement: ValueAttribute): boolean;

    execBeforeReferenceAttribute(modelelement: ReferenceAttribute): boolean;
    execAfterReferenceAttribute(modelelement: ReferenceAttribute): boolean;
}
