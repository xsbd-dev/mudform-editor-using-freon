// Generated by the Freon Language Generator.
import { FreError, FreErrorSeverity, FreWriter, FreLanguageEnvironment } from "@freon4dsl/core";
import {
    MuDForM_Model,
    ConceptDefinitions,
    ValueDef,
    SimpleValueDef,
    EntityDef,
    TransitionDef,
    ValueAttribute,
    ReferenceAttribute,
    DbType,
} from "../../language/gen/index.js";
import { MuDForM_ModelDefaultWorker } from "../../utils/gen/index.js";
import { MuDForM_ModelCheckerInterface } from "./MuDForM_ModelValidator.js";

/**
 * Class MuDForM_ModelNonOptionalsChecker is part of the implementation of the default validator.
 * It checks whether non-optional properties, as such defined in the .ast definition, indeed
 * have a value.
 * Class MuDForM_ModelWalker implements the traversal of the model tree. This class implements
 * the actual checking of each node in the tree.
 */
export class MuDForM_ModelNonOptionalsChecker extends MuDForM_ModelDefaultWorker implements MuDForM_ModelCheckerInterface {
    // 'myWriter' is used to provide error messages on the nodes in the model tree
    myWriter: FreWriter = FreLanguageEnvironment.getInstance().writer;
    // 'errorList' holds the errors found while traversing the model tree
    errorList: FreError[] = [];

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeMuDForM_Model(modelelement: MuDForM_Model): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeConceptDefinitions(modelelement: ConceptDefinitions): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeValueDef(modelelement: ValueDef): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeSimpleValueDef(modelelement: SimpleValueDef): boolean {
        if (modelelement.doc === null || modelelement.doc === undefined || modelelement.doc?.length === 0) {
            this.errorList.push(
                new FreError("Property 'doc' must have a value", modelelement, modelelement.name, "doc", FreErrorSeverity.Error),
            );
        }
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }
        if (modelelement.db_type === null || modelelement.db_type === undefined) {
            this.errorList.push(
                new FreError("Property 'db_type' must have a value", modelelement, modelelement.name, "db_type", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeEntityDef(modelelement: EntityDef): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }
        if (modelelement.doc === null || modelelement.doc === undefined || modelelement.doc?.length === 0) {
            this.errorList.push(
                new FreError("Property 'doc' must have a value", modelelement, modelelement.name, "doc", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeTransitionDef(modelelement: TransitionDef): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }
        if (modelelement.doc === null || modelelement.doc === undefined || modelelement.doc?.length === 0) {
            this.errorList.push(
                new FreError("Property 'doc' must have a value", modelelement, modelelement.name, "doc", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeValueAttribute(modelelement: ValueAttribute): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }
        if (modelelement.valueRef === null || modelelement.valueRef === undefined) {
            this.errorList.push(
                new FreError("Property 'valueRef' must have a value", modelelement, modelelement.name, "valueRef", FreErrorSeverity.Error),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeReferenceAttribute(modelelement: ReferenceAttribute): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }
        if (modelelement.entityRef === null || modelelement.entityRef === undefined) {
            this.errorList.push(
                new FreError(
                    "Property 'entityRef' must have a value",
                    modelelement,
                    modelelement.name,
                    "entityRef",
                    FreErrorSeverity.Error,
                ),
            );
        }

        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeDbType(modelelement: DbType): boolean {
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length === 0) {
            this.errorList.push(
                new FreError("Property 'name' must have a value", modelelement, modelelement.name, "name", FreErrorSeverity.Error),
            );
        }

        return false;
    }
}
