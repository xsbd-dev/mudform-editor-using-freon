// Generated by the Freon Language Generator.
import { FreError, FreErrorSeverity, FreWriter, FreNodeReference, FreNamedNode, FreNode, FreLanguageEnvironment } from "@freon4dsl/core";
import { SimpleValueDef, ValueAttribute, ReferenceAttribute } from "../../language/gen/index.js";
import { MuDForM_ModelDefaultWorker } from "../../utils/gen/index.js";
import { MuDForM_ModelCheckerInterface } from "./MuDForM_ModelValidator.js";

/**
 * Class MuDForM_ModelReferenceChecker is part of the implementation of the default validator.
 * It checks whether references can be found within the model.
 *
 * Class MuDForM_ModelWalker implements the traversal of the model tree. This class implements
 * the actual checking of each node in the tree.
 */
export class MuDForM_ModelReferenceChecker extends MuDForM_ModelDefaultWorker implements MuDForM_ModelCheckerInterface {
    // 'myWriter' is used to provide error messages on the nodes in the model tree
    myWriter: FreWriter = FreLanguageEnvironment.getInstance().writer;
    // 'errorList' holds the errors found while traversing the model tree
    errorList: FreError[] = [];
    private refSeparator: string = "/";

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeSimpleValueDef(modelelement: SimpleValueDef): boolean {
        if (!!modelelement.db_type && modelelement.db_type.referred === null) {
            this.makeErrorMessage(modelelement, modelelement.db_type, "db_type", `${modelelement.name}`);
        }
        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeValueAttribute(modelelement: ValueAttribute): boolean {
        if (!!modelelement.valueRef && modelelement.valueRef.referred === null) {
            this.makeErrorMessage(modelelement, modelelement.valueRef, "valueRef", `${modelelement.name}`);
        }
        return false;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeReferenceAttribute(modelelement: ReferenceAttribute): boolean {
        if (!!modelelement.entityRef && modelelement.entityRef.referred === null) {
            this.makeErrorMessage(modelelement, modelelement.entityRef, "entityRef", `${modelelement.name}`);
        }
        return false;
    }

    private makeErrorMessage(
        modelelement: FreNode,
        referredElem: FreNodeReference<FreNamedNode>,
        propertyName: string,
        locationDescription: string,
    ) {
        const scoper = FreLanguageEnvironment.getInstance().scoper;
        const possibles = scoper.getVisibleElements(modelelement).filter((elem) => elem.name === referredElem.name);
        if (possibles.length > 0) {
            this.errorList.push(
                new FreError(
                    `Reference '${referredElem.pathnameToString(this.refSeparator)}' should have type '${referredElem.typeName}', but found type(s) [${possibles.map((elem) => `${elem.freLanguageConcept()}`).join(", ")}]`,
                    modelelement,
                    `${propertyName} of ${locationDescription}`,
                    `${propertyName}`,
                    FreErrorSeverity.Error,
                ),
            );
        } else {
            this.errorList.push(
                new FreError(
                    `Cannot find reference '${referredElem.pathnameToString(this.refSeparator)}'`,
                    modelelement,
                    `${propertyName} of ${locationDescription}`,
                    `${propertyName}`,
                    FreErrorSeverity.Error,
                ),
            );
        }
    }
}
