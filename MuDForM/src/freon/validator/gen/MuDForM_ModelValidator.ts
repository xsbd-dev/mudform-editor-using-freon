// Generated by the Freon Language Generator.
import { FreValidator, FreError, FreCompositeTyper, FreNode } from "@freon4dsl/core";
// import { FreNode } from "../../language/gen/index.js";
import { MuDForM_ModelNonOptionalsChecker } from "./MuDForM_ModelNonOptionalsChecker.js";

import { MuDForM_ModelReferenceChecker } from "./MuDForM_ModelReferenceChecker.js";
import { MuDForM_ModelWalker, MuDForM_ModelWorker } from "../../utils/gen/index.js";
import { freonConfiguration } from "../../config/FreonConfiguration.js";

/**
 * Interface 'MuDForM_ModelCheckerInterface' represents any object that traverses the model tree and checks
 * its nodes, where any errors are deposited in 'errorList'.
 * Every checker that is used by the validator 'MuDForM_ModelValidator' should implement this interface.
 */
export interface MuDForM_ModelCheckerInterface extends MuDForM_ModelWorker {
    errorList: FreError[];
}

/**
 * Class MuDForM_ModelValidator implements the validator generated from, if present, the validator definition,
 * otherwise this class implements the default validator.
 * The implementation uses the visitor pattern to traverse the tree. Class MuDForM_ModelWalker implements
 * the actual checking of each node in the tree.
 */
export class MuDForM_ModelValidator implements FreValidator {
    /**
     * Returns the list of errors found in 'modelelement'.
     * This method uses the visitor pattern to traverse the tree with 'modelelement' as top node,
     * where classes MuDForM_ModelNonOptionalsChecker, MuDForM_ModelReferenceChecker,  implements the actual checking of each node in the tree.
     *
     * @param modelelement
     * @param includeChildren if true, the children of 'modelelement' are also checked.
     * The default for 'includeChildren' is true.
     */
    public validate(modelelement: FreNode, includeChildren: boolean = true): FreError[] {
        // initialize the errorlist
        const errorlist: FreError[] = [];

        // create the walker over the model tree
        const myWalker = new MuDForM_ModelWalker();

        // create the checker on non-optional parts
        let myChecker = new MuDForM_ModelNonOptionalsChecker();
        myChecker.errorList = errorlist;
        // and add the checker to the walker
        myWalker.myWorkers.push(myChecker);

        // create the checker on references
        myChecker = new MuDForM_ModelReferenceChecker();
        myChecker.errorList = errorlist;
        // and add the checker to the walker
        myWalker.myWorkers.push(myChecker);

        // add any custom validations
        for (let checker of freonConfiguration.customValidations) {
            checker.errorList = errorlist;
            myWalker.myWorkers.push(checker);
        }

        // do the work
        myWalker.walk(modelelement, () => {
            return includeChildren;
        });

        // return any errors
        return errorlist;
    }
}
