// Generated by the Freon Language Generator.
import { FreNamedNode, FreNodeReference, FreWriter, FreNode } from "@freon4dsl/core";
import {
    ConceptTypeDefinitions,
    ValueTypeDef,
    ValueType,
    SimpleValueType,
    DatomicType,
    ProductValueType,
    SumValueType,
    TypeField,
    ListValueType,
    ValueTypeReference,
    EntityTypeDef,
    TransitionTypeDef,
    ValueAttribute,
    ReferenceAttribute,
} from "../../language/gen/index.js";

/**
 * SeparatorType is used to unparse lists.
 * NONE means only space(s) between the elements.
 * Terminator means that every element is terminated with a certain string.
 * Separator means that in between elements a certain string is placed.
 */
enum SeparatorType {
    NONE = "NONE",
    Terminator = "Terminator",
    Separator = "Separator",
    Initiator = "Initiator",
}

/**
 * Class MuDForM_ModelModelUnitWriter provides methods to return a string representation of an instance of
 * elements of language MuDForM_Model.
 * It is, amongst others, used to create error messages in the validator.
 */
export class MuDForM_ModelModelUnitWriter implements FreWriter {
    output: string[] = []; // stores the result, one line per array element
    currentLine: number = 0; // keeps track of the element in 'output' that we are working on

    /**
     * Returns a string representation of 'modelelement'.
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     * Note that the single-line-string cannot be parsed into a correct model.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToString(modelelement: FreNode, startIndent?: number, short?: boolean): string {
        this.writeToLines(modelelement, startIndent, short);
        return `${this.output
            .map((line) => `${line.trimEnd()}`)
            .join("\n")
            .trimEnd()}`;
    }

    /**
     * Returns a string representation of 'modelelement', divided into an array of strings,
     * each of which contain a single line (without newline).
     * If 'short' is present and true, then a single-line result will be given.
     * Otherwise, the result is always a multi-line string.
     *
     * @param modelelement
     * @param startIndent
     * @param short
     */
    public writeToLines(modelelement: FreNode, startIndent?: number, short?: boolean): string[] {
        // set default for optional parameters
        if (startIndent === undefined) {
            startIndent = 0;
        }
        if (short === undefined) {
            short = false;
        }

        // make sure the global variables are reset
        this.output = [];
        this.currentLine = 0;

        // begin the unparsing with an indent if asked for
        let indentString: string = "";
        for (let _i = 0; _i < startIndent; _i++) {
            indentString += " ";
        }
        this.output[this.currentLine] = indentString;

        // do the actual work
        this.unparse(modelelement, short);
        return this.output;
    }

    /**
     * Returns the name of 'modelelement' if it has one, else returns
     * a short unparsing of 'modelelement'.
     * Used by the validator to produce readable error messages.
     *
     * @param modelelement
     */
    public writeNameOnly(modelelement: FreNode): string {
        if (!modelelement) {
            return "";
        }

        if (modelelement instanceof ConceptTypeDefinitions) {
            return modelelement.name;
        } else if (modelelement instanceof ValueTypeDef) {
            return modelelement.name;
        } else if (modelelement instanceof DatomicType) {
            return modelelement.name;
        } else if (modelelement instanceof EntityTypeDef) {
            return modelelement.name;
        } else if (modelelement instanceof TransitionTypeDef) {
            return modelelement.name;
        } else {
            // make sure the global variables are reset
            this.output = [];
            this.currentLine = 0;
            // do not care about indent, we just need a single line
            this.output[this.currentLine] = "";
            // do the actual work
            this.unparse(modelelement, true);
            return this.output[0].trimEnd();
        }
    }

    private unparse(modelelement: FreNode, short: boolean) {
        if (!modelelement) {
            return;
        }
        switch (modelelement.freLanguageConcept()) {
            case "ValueTypeDef":
                this.unparseValueTypeDef(modelelement as ValueTypeDef, short);
                break;
            case "ValueType":
                this.unparseValueType(modelelement as ValueType, short);
                break;
            case "SimpleValueType":
                this.unparseSimpleValueType(modelelement as SimpleValueType, short);
                break;
            case "DatomicType":
                this.unparseDatomicType(modelelement as DatomicType, short);
                break;
            case "ProductValueType":
                this.unparseProductValueType(modelelement as ProductValueType, short);
                break;
            case "SumValueType":
                this.unparseSumValueType(modelelement as SumValueType, short);
                break;
            case "TypeField":
                this.unparseTypeField(modelelement as TypeField, short);
                break;
            case "ListValueType":
                this.unparseListValueType(modelelement as ListValueType, short);
                break;
            case "ValueTypeReference":
                this.unparseValueTypeReference(modelelement as ValueTypeReference, short);
                break;
            case "EntityTypeDef":
                this.unparseEntityTypeDef(modelelement as EntityTypeDef, short);
                break;
            case "TransitionTypeDef":
                this.unparseTransitionTypeDef(modelelement as TransitionTypeDef, short);
                break;
            case "ValueAttribute":
                this.unparseValueAttribute(modelelement as ValueAttribute, short);
                break;
            case "ReferenceAttribute":
                this.unparseReferenceAttribute(modelelement as ReferenceAttribute, short);
                break;
            case "ConceptTypeDefinitions":
                this.unparseConceptTypeDefinitions(modelelement as ConceptTypeDefinitions, short);
                break;
        }
    }

    /**
     * Unparsing of 'ValueTypeDef' according to projection 'default'.
     */
    private unparseValueTypeDef(modelelement: ValueTypeDef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ValueTypeDef `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `doc `;
            this.output[this.currentLine] += `"${modelelement.doc}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `type `;
            this.unparse(modelelement.type, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'SimpleValueType' according to projection 'default'.
     */
    private unparseSimpleValueType(modelelement: SimpleValueType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `SimpleValueType `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `primitive_type `;
            this._unparseReference(modelelement.primitive_type, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ProductValueType' according to projection 'default'.
     */
    private unparseProductValueType(modelelement: ProductValueType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ProductValueType `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `fields `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.fields,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'SumValueType' according to projection 'default'.
     */
    private unparseSumValueType(modelelement: SumValueType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `SumValueType `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `fields `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.fields,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'TypeField' according to projection 'default'.
     */
    private unparseTypeField(modelelement: TypeField, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `TypeField `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `label `;
            this.output[this.currentLine] += `"${modelelement.label}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `type `;
            this.unparse(modelelement.type, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ListValueType' according to projection 'default'.
     */
    private unparseListValueType(modelelement: ListValueType, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ListValueType `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `list `;
            this.unparse(modelelement.list, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ValueTypeReference' according to projection 'default'.
     */
    private unparseValueTypeReference(modelelement: ValueTypeReference, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ValueTypeReference `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `defRef `;
            this._unparseReference(modelelement.defRef, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'EntityTypeDef' according to projection 'default'.
     */
    private unparseEntityTypeDef(modelelement: EntityTypeDef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `EntityTypeDef `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `doc `;
            this.output[this.currentLine] += `"${modelelement.doc}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `properties `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.properties,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `relations `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.relations,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'TransitionTypeDef' according to projection 'default'.
     */
    private unparseTransitionTypeDef(modelelement: TransitionTypeDef, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `TransitionTypeDef `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `doc `;
            this.output[this.currentLine] += `"${modelelement.doc}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `parameters `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.parameters,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `involvements `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.involvements,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ValueAttribute' according to projection 'default'.
     */
    private unparseValueAttribute(modelelement: ValueAttribute, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ValueAttribute `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `label `;
            this.output[this.currentLine] += `"${modelelement.label}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `valueRef `;
            this._unparseReference(modelelement.valueRef, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ReferenceAttribute' according to projection 'default'.
     */
    private unparseReferenceAttribute(modelelement: ReferenceAttribute, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ReferenceAttribute `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `label `;
            this.output[this.currentLine] += `"${modelelement.label}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `entityRef `;
            this._unparseReference(modelelement.entityRef, short);
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * Unparsing of 'ConceptTypeDefinitions' according to projection 'default'.
     */
    private unparseConceptTypeDefinitions(modelelement: ConceptTypeDefinitions, short: boolean) {
        const blockIndent = this.output[this.currentLine].length;
        // do the first line
        this.output[this.currentLine] += `ConceptTypeDefinitions `;
        this.output[this.currentLine] += `${modelelement.name} `;
        this.output[this.currentLine] += `\{ `;

        if (!short) {
            // do the rest of the lines as well
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `doc `;
            this.output[this.currentLine] += `"${modelelement.doc}" `;
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `values `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.values,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `entities `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.entities,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 4);
            this.output[this.currentLine] += `transitions `;
            this.newlineAndIndentation(blockIndent + 8);
            this._unparseList(
                modelelement.transitions,
                "",
                SeparatorType.Separator,
                true,
                this.output[this.currentLine].length,
                short,
                (modelelement, short) => this.unparse(modelelement, short),
            );
            this.newlineAndIndentation(blockIndent + 0);
            this.output[this.currentLine] += `} `;
        }
    }

    /**
     * The limited concept 'DatomicType' is unparsed as its name.
     */
    private unparseDatomicType(modelelement: DatomicType, short: boolean) {
        if (!!modelelement) {
            this.output[this.currentLine] += modelelement.name + " ";
        }
    }
    /**
     * The abstract concept 'ValueType' is not unparsed.
     */
    private unparseValueType(modelelement: ValueType, short: boolean) {
        throw new Error("Method unparseValueType should be implemented by its (concrete) subclasses.");
    }

    /**
     *
     */
    private _unparseReference(modelelement: FreNodeReference<FreNamedNode>, short: boolean) {
        if (!!modelelement) {
            const type: FreNamedNode = modelelement?.referred;
            if (!!type) {
                if (type instanceof DatomicType) {
                    this.unparseDatomicType(type, short);
                } else {
                    this.output[this.currentLine] += modelelement.pathnameToString(".") + " ";
                }
            } else {
                this.output[this.currentLine] += modelelement.pathnameToString(".") + " ";
            }
        }
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     * @param method
     * @private
     */
    private _unparseList(
        list: FreNode[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean,
        method: (modelelement: FreNode, short: boolean) => void,
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.doInitiator(sepText, sepType);
            method(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of a list of references, where every reference
     * is replaced by the name of its referred element. The use of params
     * 'sepText' and 'SepType' are equals to those in the private method _unparseList.
     * @param list
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private _unparseReferenceList(
        list: FreNodeReference<FreNamedNode>[],
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean,
    ) {
        list.forEach((listElem, index) => {
            const isLastInList: boolean = index === list.length - 1;
            this.doInitiator(sepText, sepType);
            this._unparseReference(listElem, short);
            this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
        });
    }

    /**
     * Adds a string representation of 'list' to the 'output', using 'sepText' , and 'sepType' to include either a separator string
     * or a terminator string. Param 'vertical' indicates whether the list should be represented vertically or horizontally.
     * If 'short' is false, then a multi-line result will be given. Otherwise, only one single-line string is added.
     * @param list
     * @param isIdentifier indicates whether the value should be surrounded with double quotes
     * @param sepText
     * @param sepType
     * @param vertical
     * @param indent
     * @param short
     */
    private _unparseListOfPrimitiveValues(
        list: (string | number | boolean)[],
        isIdentifier: boolean,
        sepText: string,
        sepType: SeparatorType,
        vertical: boolean,
        indent: number,
        short: boolean,
    ) {
        if (!!list) {
            list.forEach((listElem, index) => {
                const isLastInList: boolean = index === list.length - 1;
                if (typeof listElem === "string" && !isIdentifier) {
                    this.output[this.currentLine] += `"${listElem}"`;
                } else {
                    this.output[this.currentLine] += `${listElem}`;
                }
                this.doSeparatorOrTerminatorAndNewline(sepType, isLastInList, sepText, vertical, short, indent);
            });
        }
    }

    /**
     * Adds a separator, terminator, or initiator text (followed or preceded by a newline and the right amount of indentation)
     * to the output, depending on the parameters.
     * @param sepType
     * @param isLastInList
     * @param sepText
     * @param vertical
     * @param short
     * @param indent
     */
    // tslint:disable-next-line:max-line-length
    private doSeparatorOrTerminatorAndNewline(
        sepType: SeparatorType,
        isLastInList: boolean,
        sepText: string,
        vertical: boolean,
        short: boolean,
        indent: number,
    ) {
        // first eliminate any whitespace at the end of the line
        this.output[this.currentLine] = this.output[this.currentLine].trimEnd();

        if (!vertical && (!sepText || sepText.length == 0)) {
            // at least separate the items by a space to avoid things
            // like "IntegerFunction", which should be "Integer Function"
            sepText = " ";
        }

        // then add the right separator or terminator
        switch (sepType) {
            case SeparatorType.Separator: {
                if (!isLastInList) {
                    this.output[this.currentLine] += sepText;
                }
                break;
            }
            case SeparatorType.Terminator: {
                this.output[this.currentLine] += sepText;
                break;
            }
            case SeparatorType.Initiator: {
                break;
            }
            case SeparatorType.NONE: {
                if (!vertical) {
                    // at least separate the items by a space to avoid things
                    // like "IntegerFunction", which should be "Integer Function"
                    this.output[this.currentLine] += " ";
                }
                break;
            }
        }

        // then add newline and indentation
        if (vertical && !isLastInList) {
            if (!short) {
                this.newlineAndIndentation(indent);
            } else {
                // stop after 1 line
                // note that the following cannot be parsed
                this.output[this.currentLine] += ` ...`;
            }
        } else if (isLastInList) {
            // end with a space to avoid things
            // like "666after", which should be "666 after"
            if (this.output[this.currentLine][this.output[this.currentLine].length - 1] !== " ") {
                this.output[this.currentLine] += ` `;
            }
        }
    }

    /**
     * Makes a new entry in the 'output' array
     * and adds the indentation of 'number' spaces
     * to the new entry/line.
     * @param indent
     */
    private newlineAndIndentation(indent: number) {
        this.currentLine += 1;
        let indentation: string = "";
        for (let _i = 0; _i < indent; _i++) {
            indentation += " ";
        }
        this.output[this.currentLine] = indentation;
    }

    /**
     * Adds the 'initiator' text
     * @param sepText
     * @param sepType
     * @private
     */
    private doInitiator(sepText: string, sepType: SeparatorType) {
        if (sepType === SeparatorType.Initiator) {
            this.output[this.currentLine] += sepText;
        }
    }
}
