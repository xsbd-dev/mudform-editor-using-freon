// Generated by the Freon Language Generator.
// Generated by Freon LanguageTemplate
import {
    FreLanguage,
    FreLanguageModel,
    FreLanguageModelUnit,
    FreLanguageProperty,
    FreLanguageConcept,
    FreLanguageInterface,
    FreNodeReference,
} from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal.js";
import { StarterModelStdlib } from "../../stdlib/gen/StarterModelStdlib.js";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "StarterModel";
    FreLanguage.getInstance().id = "";
    FreLanguage.getInstance().addModel(describeStarterModel());
    FreLanguage.getInstance().addUnit(describeDummyUnit());

    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
    FreLanguage.getInstance().stdLib = StarterModelStdlib.getInstance();
}

function describeStarterModel(): FreLanguageModel {
    const model: FreLanguageModel = {
        typeName: "StarterModel",
        id: "-id-StarterModel",
        key: "-key-StarterModel",
        isNamespace: true,
        language: "-key-Starter",
        constructor: (id?: string) => {
            return new MyLanguage.StarterModel(id);
        },
        creator: (data: Partial<MyLanguage.StarterModel>) => {
            return MyLanguage.StarterModel.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
    };
    model.properties.set("name", {
        name: "name",
        id: "-id-StarterModel-name",
        key: "-key-StarterModel-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Starter",
        propertyKind: "primitive",
    });
    model.properties.set("units", {
        name: "units",
        id: "-id-StarterModel-units",
        key: "-key-StarterModel-units",
        type: "DummyUnit",
        isList: true,
        isPublic: true,
        isOptional: false,
        language: "-key-Starter",
        propertyKind: "part",
    });

    return model;
}

function describeDummyUnit(): FreLanguageModelUnit {
    const modelunit: FreLanguageModelUnit = {
        typeName: "DummyUnit",
        id: "-id-DummyUnit",
        key: "-key-DummyUnit",
        isNamedElement: true,
        language: "-key-Starter",
        fileExtension: "dum",
        subConceptNames: [], // Nothing yet, but may change in the future
        constructor: (id?: string) => {
            return new MyLanguage.DummyUnit(id);
        },
        creator: (data: Partial<MyLanguage.DummyUnit>) => {
            return MyLanguage.DummyUnit.create(data);
        },
        properties: new Map<string, FreLanguageProperty>(),
        trigger: "DummyUnit",
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "-id-DummyUnit-name",
        key: "-key-DummyUnit-name",
        type: "string",
        isList: false,
        isPublic: true,
        isOptional: false,
        language: "-key-Starter",
        propertyKind: "primitive",
    });

    return modelunit;
}
